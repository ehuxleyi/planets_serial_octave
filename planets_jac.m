% function defining the Jacobian of the model ODE
% 
% this file sets out how to calculate the Jacobian of the ODE, i.e.
% the derivative with respect to temperature of the rate of change of
% planetary surface temperature over time (dT/dt). This is the same as the
% slope on the graphs generated by "plot_feedbacks"
% 
% *******
% Note that planets_ODE and planets_jac go as a pair: changes to one should
% be matched with changes to the other
% ******* 
%--------------------------------------------------------------------------

function [out] = planets_jac(time, in)

% some variables are made global because difficult to pass as arguments 
global Tmin Tmax Tgap Tnodes nnodes Tfeedbacks

% T = current temperature
T = in(1);
out = [in'; 0 0];

% ----- equation for the Jacobian -----

% the value of the Jacobian depends on the planetary temperature. The value
% of dT/dt at any precise value of T is interpolated between specified
% values at regular intervals

% work out which 'nodes' this particular value of T is between
node_bef = 1 + floor((T-Tmin)/Tgap);
node_aft = 1 + ceil((T-Tmin)/Tgap);
if (node_bef < 1)
    node_bef = 1;
elseif (node_bef > nnodes)
    node_bef = nnodes;
end
if (node_aft < 1)
    node_aft = 1;
elseif (node_aft > nnodes)
    node_aft = nnodes;
end

% if T is outside the habitable range ...
if ((T < Tmin) || (T > Tmax))
    out(1) = 0.0;       % ... doesn't matter anymore
    
    % if T is exactly at a node
elseif (node_bef == node_aft)
    out(1) = 0.0;       % slope is unspecified at a node

    % else if T is between nodes
else
    % calculate the slope of dT/dt against T
    out(1) = (Tfeedbacks(node_aft) - Tfeedbacks(node_bef)) / ...
              (Tnodes(node_aft) - Tnodes(node_bef));
end

out(2) = 0.0;
